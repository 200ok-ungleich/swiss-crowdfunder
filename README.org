* README

[[https://gitlab.com/200ok/crowdfunding/badges/master/pipeline.svg]]

** Setup

*** Install RBenv

macOS: =brew install rbenv=

*** Install Ruby version 2.4.1

macOS: =rbenv install 2.4.1=

*** Install bundler

=gem install bundler=

*** Clone the repository

*** Install dependencies

Within your local checkout run =bundle=.

For testing, install =chromedriver= > v59.

*** Configure Database

Every host that runs this application can have a different database
configuration. There is an example configuration that runs on sqlite,
however that you can easily use by:

=cd config; ln -s database.yml.example database.yml; cd -=

Alternatively you can configure PG, MySQL or others.

*** Migrate Database

=rake db:create db:migrate db:seed=

** Development
*** Start Application

=rails s=

*** Run tests

Automatically run tests while development

#+BEGIN_SRC sh
guard
#+END_SRC

For Emacs Users: When using `enh-ruby-mode`, this will also
automatically color your status bar either green on success or red on error.

*** Live Reload

Using the Gems =guard-livereload= and =rack-livereload=, development
and saving of =*.erb= files will reload your browser. Developing
=*.scss= files will also hot-load the respective CSS within the
browser.

*** Development collaboration

We have good quality assurance and an established workflow. This is it:

1. New Story in this README, section TODOs
  - In the form of a User Story (As =<persona>=, [When I =<state>= ],
    I want =<something>=, so that =<measurable achievement>=
1. New Branch in Git
  - Naming: (feature|bugfix|chore)/short-description
1. Develop / Test Locally until tests pass on CI
1. Create Merge Request on Gitlab to Master. Assign someone to review.
1. Finish Story
1. Assigned person: Merge to Master, deploy and accept the story on Pivotal

** Deployment

*** Premise

- You need to have the ssh-agent running, for example under Debian =eval
`ssh-agent -s`=.

- Your ssh identities need to be added to the ssh-agent: =ssh-add=


*** Deploy

We are using =capistrano= to deploy the newest version, roll back,
compile assets and restart the app container.

Deploy the newest version of =master=: =cap production deploy=

Optionally you can locally set a local ENV variable =REVISION= to set
a different branch than =master= for deployment.


*** Delete DB in Production

#+BEGIN_SRC

unicorn_wrapper stop
DISABLE_DATABASE_ENVIRONMENT_CHECK=1 rake db:drop db:create db:migrate db:seed

#+END_SRC

** SRE / Maintenance

There is exception notification:

- via email to sre@ungleich.ch
- via mattermost to #crowdfunding-live

** Exception handling process

If I see the email and I am going to work on it, I immediately send a reply
containing "ACK" to let people know that somebody is taking care of it. I
do not say "ACK" if I am not going to work on it. (If it is urgent and
needs to be handled now, I have to work on it right now, otherwise I don't
send an ACK; if it is not urgent, I can send an ACK now and work on it
later if I want to.)

Sending an ACK means that I take ownership of the problem: other people do
not need to worry about it if they see an ACK (unless I ask them for help,
of course).

When investigating, I can, but don't have to send updates.

I must send a short explanation of the problem and the steps I took to
resolve it when I solve it. I should also follow up with steps that have
been taken to prevent this issue in the future.

** Documentation

*** ERD
There is an [[file:doc/erd.dot][ERD]] defined in dot-syntax which is also available as [[file:doc/erd.svg][SVG]].

The command to compile the SVG is: =dot -Tsvg doc/erd.dot > doc/erd.svg=

*** Security

    For the initial version of the application, there is only one route
that can create entities, none that can update or destroy any.
Creation of the resource only works on a valid model and has only the
potential side effect of generating more money for the campaign. Apart
from a brute force attempt of creating bogus data, there's little
security risk involved.

Also, there's no concept of a logged-in user, yet. Therefore, there is
no global lock-down needed/possible. The =cancancan= and =device= gems
are in place, though, for authorization and authentication as soon as
supporters get the ability to create/modify/destroy any other data or
have the ability to log in.

*** Testing on CI

We are using Gitlab CI as a testing service.

** TODOs

*** PROJECT Ready for Ungleich Crowdfunding
    SCHEDULED: <2017-10-17 Tue> DEADLINE: <2017-10-27 Fri>
**** TODO Send Email on Order#create
     - [ ] Campaign Model: E-Mail
**** TODO On create order/user: Send Notification to Mattermost
**** TODO Create a proper 500 page
- Right now, there's a redirect to the 404 page, so that kinda works!
**** TODO Re-Add SRE team and Mattermost notifications
**** DONE Add ExceptionNotification E-Mails
- [X] Nico: Setup server side mail delivery
- [X] Test mail delivery
- [X] Activate Mattermost notifications
**** DONE Camgains#show/Goodies#index: Show original and remaining quantity
**** DONE NF: SEO friendly URLs for Campaigns
**** DONE Address: Street, #, ZIP, City, Country
**** DONE As a user, when checking out a goodie, I want to be able to pay with my bank account
- Gleicher FLow wie jetzt
- Anstelle CC Form: Bank-Einzugs Info
**** [100%] NF: Nico should confirm

- [X] Test itinerary
- [X] cdist run
- [X] SSL
**** DONE Text Feld auf Order: Bank Einzug
**** DONE [100%] Redirect root to Nicos campaign
     - [X] Actual redirect
     - [X] Feature Specs
**** DONE Handle 404s
**** DONE campaigns#show: I18n supporters
**** DONE Regression: Progress bar doesn't work
**** DONE As a user, when ordering, I need to give my email address
**** DONE NF: Capistrano Bug - Migrations run on every deploy
**** DONE Campaign Model: Introduce optional FB and Twitter Links
**** DONE NF: Eval - Users as Nested Attributes through Orders
**** DONE [100%] NF: Integrate FactoryGirl
- [X] spec/features/admin_spec.rb
- [X] spec/features/campaigns_spec.rb
- [X] spec/features/application_spec.rb
- [X] spec/features/root_spec.rb
- [X] spec/models/supporter_spec.rb
- [X] spec/models/campaign_spec.rb
- [X] spec/controllers/orders_controller_spec.rb
- [X] spec/controllers/root_controller_spec.rb

**** DONE As a user, when checking out a goodie, I want to give user-info: Name, E-Mail, Date of Birth (>=18)
- [ ] Validation

**** DONE NF: Global Lock-Down
**** DONE Remove icons from Goodies
**** DONE NF: Introduce capistrano for deployment by everyone
**** DONE Introduce "About Us" Page without content
**** DONE Introduce "TOS" Page without content


*** PROJECT Ready beyond ungleich

**** TODO Discuss deleting parent resources logic with Nico

When destroying a Goodie which has Orders, what should happen?

- Delete the goodie and nullify foreign_keys in Orders?
- Show a warning and don't delete anything?
**** TODO campaigns#show: Add update ticker
- [ ] Add tabs to campaigns#show
- [ ] Add CampaignUpdate Model (markdown)
- [ ] Let every CampaignUpdate have it's unique URL nested under Campaign
- [ ] When going to a specific CampaignUpdate URL, go to the tab and
  scroll to the specific update.
- [ ] Alternatively let only have CampaignUpdates have a unique URL
  for the tab as a start

**** TODO Handle 500 with separate page (analogous to 404)
**** TODO Implement Stripe
**** TODO Integrate Favicon
**** TODO Replace application.html.erb fonts and font-awesome CDN with local variant
**** TODO i18n all the strings
**** TODO As soon as users can create/modify/delete resources or login: Implement global lock-down
- See [[Security]] for more information
**** PROJECT Secret Keys

- [ ]  More secret creation of Admin User than through =db/seeds.rb=
- [ ]  More secret devise keys than in =config/devise.rb=
- [X] Do not expose =SECRET_KEY_BASE= in this README

**** TODO Add CanCanCan and lock down the /whole/ application
**** DONE Reconfigure GA link to the proper URL
